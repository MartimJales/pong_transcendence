"""
Django settings for pingpong project.

Generated by 'django-admin startproject' using Django 4.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

#BASE_DIR = os.path.pingpong(os.path.pingpong(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See httpss://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^!ba1tr5vg1u%7&)cvajaor1ztotf3j2xh^mbc03(1y1hwon^e'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost'
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders', 
    #'authentication',
    'authentication.apps.AuthenticationConfig',
    #'chat',
    
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'pingpong.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'pingpong.wsgi.application'

ASGI_APPLICATION = 'pingpong.asgi.application' #esse add depoius

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer'
    }
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Please note that this has been severely tweaked in order to integrate
# Django with Vault

import hvac
import os
import time

VAULT_URL = os.environ.get('VAULT_ADDR')
VAULT_TOKEN = os.environ.get('VAULT_TOKEN')
VAULT_KEYS = os.environ.get('VAULT_KEYS').split(' ')

client = hvac.Client(url=VAULT_URL, token=VAULT_TOKEN)

print("Attempting to unseal Vault...")
for key in VAULT_KEYS:
    response = client.sys.submit_unseal_key(key)
    if not response['sealed']:
        print("Vault unsealed succesfully")
        break
else:
    raise Exception("Django failed to unseal Vault")

try:
    db_creds = client.secrets.database.generate_credentials(name='django-role')
    print("Successfully fetched credentials")
except Exception as e:
    print("Error fetching credentials:", e)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'pong',
        'USER': db_creds['data']['username'],
        'PASSWORD': db_creds['data']['password'],
        'HOST': os.environ.get('DB_ADDR'),
        'PORT': os.environ.get('DB_PORT'),
        'OPTIONS': {
            'sslmode': 'require',
            'sslrootcert': '/usr/share/ca-certificates/pac4_ca.crt'
        },
    }
}

client.sys.seal()

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

#para funcionar mandar o crf token *********************************
CORS_ALLOW_CREDENTIALS = True
CSRF_COOKIE_SAMESITE = 'None'  # Allow cross-site usage
CSRF_COOKIE_SECURE = True  # Require HTTPS
CSRF_COOKIE_HTTPONLY = False 
SESSION_COOKIE_SAMESITE = 'None'
SESSION_COOKIE_SECURE = True  # Require HTTPS

#######################################cookie stuff######################
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 1209600  # 2 weeks
SESSION_COOKIE_NAME = 'sessionid'
SESSION_COOKIE_SECURE = True  # Use with HTTPS
SESSION_COOKIE_HTTPONLY = False # befoge estava false
SESSION_COOKIE_SAMESITE = 'None' 

# CORS settings
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "https://localhost:1443",
]

CSRF_TRUSTED_ORIGINS = [
    "https://localhost:1443",
]


CSRF_COOKIE_HTTPONLY = False  # False allows JavaScript to access the cookie
SESSION_COOKIE_HTTPONLY = True
#CSRF_COOKIE_SAMESITE = 'Lax'

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    #os.path.join(BASE_DIR, 'static')
    BASE_DIR / "static",
]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # senao django reclama

# MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'static/images')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CORS_ALLOW_ALL_ORIGINS = True
