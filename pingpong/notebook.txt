from web3 import Web3

def store_match_result_on_blockchain(match_result):
    # ... (code to connect to the blockchain and get the contract)

    # Connect to Sepolia using Infura (replace 'YOUR_INFURA_PROJECT_ID' with your actual Infura project ID)
    infura_url = "https://sepolia.infura.io/v3/YOUR_INFURA_PROJECT_ID"
    w3 = Web3(Web3.HTTPProvider(infura_url))

    # Get the contract's ABI (Application Binary Interface) and address
    abi = [
        # ... (paste your contract's ABI here)
    ]
    contract_address = "0xYOUR_CONTRACT_ADDRESS"

    # Create a contract instance, para deixar interagir
    contract = w3.eth.contract(address=contract_address, abi=abi) abi Ã© pa user funcionalidade, contrac_adrres nois cata aqui, Visit the Infura website: Go to https://www.infura.io/

    # Convert match result data to a format suitable for the smart contract
    match_data = {
        "player1": match_result.player1,
        "player2": match_result.player2,    
        # ... other fields
    }

    # Call the smart contract function to store the data
    tx_hash = contract.functions.storeMatchResult(match_data).call()

    # ... (code to handle transaction success or failure)
    \
    The two lines of code serve different purposes:

contract = w3.eth.contract(address=contract_address, abi=abi)

Purpose: Creates an instance of the smart contract on the blockchain.
Explanation:
w3.eth.contract: This part creates a contract object that allows you to interact with the smart contract.
address: This is the unique address of your deployed smart contract on the blockchain.
abi: This is the Application Binary Interface (ABI) of your smart contract, which defines the functions, events, and data structures.
In essence: This line connects your code to the specific smart contract on the blockchain, providing a way to interact with its functions.
tx_hash = contract.functions.storeMatchResult(match_data).call()

Purpose: Calls a function in the smart contract and stores the transaction hash.
Explanation:
contract.functions.storeMatchResult: This part accesses the storeMatchResult function defined in your smart contract.
match_data: This is the data you want to pass to the function.
.call(): This part executes the function and returns the transaction hash.
In essence: This line sends the match_data to the storeMatchResult function in your smart contract, initiating a transaction on the blockchain. The transaction hash is returned as a result.


Python
import web3

# ... (other imports)

def store_match_result(request):
    # Replace with your actual contract address and ABI
    contract_address = "0xYOUR_CONTRACT_ADDRESS"
    abi = [
        # ... (paste your contract's ABI here)
    ]

    # Create a Web3 instance and connect to Sepolia
    w3 = web3.Web3(web3.HTTPProvider("https://sepolia.infura.io/v3/YOUR_INFURA_PROJECT_ID"))

    # Create a contract instance
    contract = w3.eth.contract(address=contract_address, abi=abi)

    # ... (get match result data from request)

    # Call the smart contract function
    tx_hash = contract.functions.storeMatchResult(match_data).call()

    # Handle the transaction result
    if tx_hash:
        # Transaction was successful
        return HttpResponse("Match result stored successfully!")
    else:
        # Handle transaction failure
        return HttpResponse("Error storing match result.")



***********************************************************************************
# requirements.txt additions:
# web3==6.11.1
# python-dotenv==1.0.0

# blockchain/utils.py
from web3 import Web3
from django.conf import settings
import json
import os
from dotenv import load_dotenv

load_dotenv()

# Connect to Sepolia
w3 = Web3(Web3.HTTPProvider(os.getenv('SEPOLIA_RPC_URL')))

# Your deployed contract address (you'll get this after deployment)
CONTRACT_ADDRESS = os.getenv('CONTRACT_ADDRESS')

# Your account address and private key
ACCOUNT_ADDRESS = os.getenv('ACCOUNT_ADDRESS')
PRIVATE_KEY = os.getenv('PRIVATE_KEY')

def get_contract():
    # Load contract ABI
    with open('blockchain/contract_abi.json', 'r') as f:
        contract_abi = json.load(f)
    
    # Create contract instance
    contract = w3.eth.contract(address=CONTRACT_ADDRESS, abi=contract_abi)
    return contract

def store_data(text: str, number: int):
    contract = get_contract()
    
    # Build transaction
    nonce = w3.eth.get_transaction_count(ACCOUNT_ADDRESS)
    transaction = contract.functions.store(text, number).build_transaction({
        'chainId': 11155111,  # Sepolia chain ID
        'gas': 2000000,
        'maxFeePerGas': w3.eth.max_priority_fee + (2 * w3.eth.get_block('latest')['baseFeePerGas']),
        'maxPriorityFeePerGas': w3.eth.max_priority_fee,
        'nonce': nonce,
    })
    
    # Sign and send transaction
    signed_txn = w3.eth.account.sign_transaction(transaction, PRIVATE_KEY)
    tx_hash = w3.eth.send_raw_transaction(signed_txn.rawTransaction)
    
    # Wait for transaction receipt
    tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
    return tx_receipt

def retrieve_data():
    contract = get_contract()
    return contract.functions.retrieve().call()

# views.py
from django.http import JsonResponse
from .utils import store_data, retrieve_data
from django.views.decorators.csrf import csrf_exempt
import json

@csrf_exempt
def store_blockchain_data(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            text = data.get('text')
            number = int(data.get('number'))
            
            tx_receipt = store_data(text, number)
            
            return JsonResponse({
                'status': 'success',
                'transaction_hash': tx_receipt['transactionHash'].hex(),
            })
        except Exception as e:
            return JsonResponse({
                'status': 'error',
                'message': str(e)
            }, status=400)

def get_blockchain_data(request):
    try:
        stored_string, stored_number = retrieve_data()
        return JsonResponse({
            'status': 'success',
            'data': {
                'text': stored_string,
                'number': stored_number
            }
        })
    except Exception as e:
        return JsonResponse({
            'status': 'error',
            'message': str(e)
        }, status=400)